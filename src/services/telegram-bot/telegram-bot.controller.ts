import { createController } from '@/common/createController'
import {
  onCommand,
  startBot,
  stopBot,
} from '@/services/telegram-bot/telegram-bot.handler'
import { telegramBotRepo } from '@/services/telegram-bot/telegram-bot.repo'
import { Controller } from '@/types/controllerRelated.types'
import { justLog } from '@/utils/justLog'

export const registerTelegramBotController: Controller<
  ReturnType<typeof telegramBotRepo>
> = createController({
  scope: 'telegram',
  requireAuth: false,
  repository: telegramBotRepo,
  register: (addListener, repository) => {
    startBot()

    onCommand('start', ctx => {
      Promise.all([
        ctx.replyWithHTML(
          `–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äì Foxy –±–æ—Ç! ü¶ä\n\n<b>–ú—ã –≤—Å–µ –µ—â–µ –∑–∞–ø—É—Å–∫–∞–µ–º—Å—è</b>, –Ω–æ –º–æ–∂–µ–º <b>—É–≤–µ–¥–æ–º–∏—Ç—å —Ç–µ–±—è —Å—Ä–∞–∑—É –∂–µ</b>, –∫–∞–∫ –æ—Ç–∫—Ä–æ–µ–º—Å—è!\n\n<b>–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏</b> –Ω–∞ /notify, –∏–ª–∏ –≤–≤–µ–¥–∏ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤—Ä—É—á–Ω—É—é!`,
        ),
        ctx.sendSticker(
          'CAACAgIAAxkBAANjYw0eE1_z_Fudt6PvpPqYr2iGj5YAAvUNAAL10ChJxQrXMg-cYYkpBA',
        ),
      ]).catch(e => justLog.warn(`Telegram: start ${e.message}`))
      const started = repository.isStarted(ctx.from.id)
      if (!started) {
        repository.startMetrics({
          id: ctx.from.id,
          name: `${ctx.from.first_name || ''} ${ctx.from.last_name || ''}`,
          username: ctx.from.username,
        })
      }
    })

    onCommand('help', ctx => {
      Promise.all([
        ctx.replyWithHTML(
          '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –í—Å–µ –ø—Ä–æ—Å—Ç–æ: \n\n/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, \n/notify - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å üòç',
        ),
        ctx.sendSticker(
          'CAACAgIAAxkBAANZYw0dS4nOMj_HTEmcfhSGWoV-EqkAAuYMAAKbqShJzLHHIeJdX8opBA',
        ),
      ]).catch(e => justLog.warn(`Telegram: help ${e.message}`))
    })

    onCommand('notify', ctx => {
      const subscribed = repository.isSubscribed(ctx.from.id)
      if (!subscribed) {
        Promise.all([
          ctx.replyWithHTML(
            '–≠—Ç–æ —á—É–¥–µ—Å–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –º—ã –∑–∞–ø—É—Å—Ç–∏–º—Å—è - –º—ã —É–≤–µ–¥–æ–º–∏–º —Ç–µ–±—è, –∏ —Ç—ã —Å–º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ —á–∏—Å–ª–µ –ø–µ—Ä–≤—ã—Ö! ü•µ',
          ),
          ctx.sendSticker(
            'CAACAgIAAxkBAANhYw0dnVpzJDwqrVAnX_qz0YjG2bIAAjIUAAKPOilJ5cTrWhS4MZ8pBA',
          ),
        ]).catch(e => justLog.warn(`Telegram: notify new ${e.message}`))
        repository.subscribeMetrics({
          id: ctx.from.id,
          name: `${ctx.from.first_name || ''} ${ctx.from.last_name || ''}`,
          username: ctx.from.username,
        })
      } else {
        ctx
          .replyWithHTML(
            '–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –ø—Ä–æ —Ç–µ–±—è –º—ã –ø–æ–º–Ω–∏–º) \n\n–ü–æ–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ –∂–¥–∞—Ç—å üòå',
          )
          .catch(e => justLog.warn(`Telegram: notify old ${e.message}`))
      }
    })

    return () => {
      stopBot('SIGINT')
    }
  },
})
